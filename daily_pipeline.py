import os
import asyncio
from datetime import datetime, date, timedelta
from dotenv import load_dotenv

# --- –ò–º–ø–æ—Ä—Ç—ã –≤—Å–µ—Ö –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Ö –≤—ã–∑–æ–≤–∞ ---
from tokens import update_token_list
from vpn_manager import connect_vpn, disconnect_vpn
from bybit_parser import parse_bybit_articles
from telegram_channel_scraper import main as run_telegram_scraper
from news_summarizer import run_news_summarizer
from topic_categorizer import run_topic_categorizer
from topic_rebalancer import run_topic_rebalancer
from title_formatter import run_title_formatter
from daily_planner import run_daily_planner
from image_prompt_generator import run_image_prompt_generator
from article_writter import run_article_writer
from picture_generator import run_picture_generator
from token_matcher import run_token_matcher
from doc_zipper import run_doc_zipper
from alerter import send_admin_alert
from telegram.ext import Application
from telegram_bot import send_digest_to_user

'''
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä (–¥–∏—Ä–∏–∂–µ—Ä) –≤—Å–µ–≥–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞.
'''


async def deliver_zips(application: Application, zips_to_deliver: dict):
    tasks = [send_digest_to_user(application, user_id, zip_path) for user_id, zip_path in zips_to_deliver.items()]
    await asyncio.gather(*tasks)


def run_daily_tasks():
    print("=" * 50)
    print(f"üöÄ –ó–ê–ü–£–°–ö –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –¶–ò–ö–õ–ê: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 50)

    target_date_str = (date.today() - timedelta(days=1)).strftime('%Y-%m-%d')
    print(f"üéØ –¶–µ–ª–µ–≤–∞—è –¥–∞—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {target_date_str}")

    # --- –≠–¢–ê–ü 0: –ü–û–î–ì–û–¢–û–í–ö–ê ---
    print("\n[0/5] üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    if not update_token_list():
        send_admin_alert("‚ö†Ô∏è *–°–±–æ–π –≤ tokens.py:*\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤.")

    if not connect_vpn():
        send_admin_alert("üî• *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π VPN:*\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è. –ü–∞–π–ø–ª–∞–π–Ω –û–°–¢–ê–ù–û–í–õ–ï–ù.")
        return

    # --- –≠–¢–ê–ü 1: –°–ë–û–† –ò –û–ë–†–ê–ë–û–¢–ö–ê –ù–û–í–û–°–¢–ï–ô ---
    print("\n[1/5] üì∞ –°–±–æ—Ä –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    try:
        success, message = parse_bybit_articles()
        if not success: send_admin_alert(f"‚ö†Ô∏è *–°–±–æ–π –≤ bybit_parser:*\n`{message}`")
    except Exception as e:
        send_admin_alert(f"üî• *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π –≤ bybit_parser:*\n`{e}`")

    try:
        asyncio.run(run_telegram_scraper())
    except Exception as e:
        send_admin_alert(f"üî• *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π –≤ telegram_scraper:*\n`{e}`\n_–ü–∞–π–ø–ª–∞–π–Ω –û–°–¢–ê–ù–û–í–õ–ï–ù._")
        disconnect_vpn()
        return

    if not run_news_summarizer(target_date=target_date_str): disconnect_vpn(); return
    if not run_topic_categorizer(target_date=target_date_str): disconnect_vpn(); return
    if not run_topic_rebalancer(target_date=target_date_str): disconnect_vpn(); return
    if not run_title_formatter(): disconnect_vpn(); return

    # --- –≠–¢–ê–ü 2: –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –ò –ì–ï–ù–ï–†–ê–¶–ò–Ø ---
    print("\n[2/5] üìÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    if not run_image_prompt_generator(): print("     [WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
    if not run_daily_planner(): disconnect_vpn(); return

    # --- –≠–¢–ê–ü 3: –§–ê–ë–†–ò–ö–ê –ö–û–ù–¢–ï–ù–¢–ê ---
    print("\n[3/5] üè≠ –§–∞–±—Ä–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    if not run_article_writer(): disconnect_vpn(); return
    if not run_picture_generator(): disconnect_vpn(); return
    if not run_token_matcher(): print("     [WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–æ–∫–µ–Ω—ã.")

    # --- –≠–¢–ê–ü 4: –°–ë–û–†–ö–ê ---
    print("\n[4/5] üì¶ –°–±–æ—Ä–∫–∞...")
    zips_to_deliver = run_doc_zipper()

    # --- –≠–¢–ê–ü 5: –î–û–°–¢–ê–í–ö–ê –ò –ó–ê–í–ï–†–®–ï–ù–ò–ï ---
    print("\n[5/5] üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
    if not zips_to_deliver:
        print("     [INFO] –ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏.")
    else:
        print("     –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏...")
        load_dotenv()
        bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        if not bot_token:
            print("     [ERROR] TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            application = Application.builder().token(bot_token).build()
            asyncio.run(deliver_zips(application, zips_to_deliver))

    disconnect_vpn()

    print("\n" + "=" * 50)
    print(f"üèÅ –ï–ñ–ï–î–ù–ï–í–ù–´–ô –¶–ò–ö–õ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 50)


if __name__ == '__main__':
    run_daily_tasks()
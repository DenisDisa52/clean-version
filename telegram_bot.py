import os
import sqlite3
from datetime import date, timedelta
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler

from database_manager import get_db_connection

"""
–ú–æ–¥—É–ª—å, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –ª–æ–≥–∏–∫—É Telegram-–±–æ—Ç–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç —Ä–∞–∑–Ω—ã—Ö "–ø–µ—Ä—Å–æ–Ω".
–¢–∞–∫–∂–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –≥–æ—Ç–æ–≤—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤.
"""

load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---

def add_or_update_user(user_id: int, username: str | None):
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        sql = "INSERT OR IGNORE INTO users (id, username) VALUES (?, ?)"
        cursor.execute(sql, (user_id, username))
        conn.commit()
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ë–î (add_or_update_user): {e}")
    finally:
        if conn:
            conn.close()


def get_all_personas():
    try:
        conn = get_db_connection()
        personas = conn.execute("SELECT id, persona_name FROM personas ORDER BY id").fetchall()
        return personas
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ë–î (get_all_personas): {e}")
        return []
    finally:
        if conn:
            conn.close()


# --- –§–£–ù–ö–¶–ò–Ø –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–µ –∏ –µ–µ –ø–ª–∞–Ω–µ ---
def get_persona_details(persona_id: int):
    details = {}
    try:
        conn = get_db_connection()
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–µ
        persona_info = conn.execute("SELECT * FROM personas WHERE id = ?", (persona_id,)).fetchone()
        if not persona_info:
            return None
        details['info'] = persona_info

        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è —ç—Ç–æ–π –ø–µ—Ä—Å–æ–Ω—ã

        today = date.today()
        week_start_date = today - timedelta(days=today.weekday())
        week_start_str = week_start_date.strftime('%Y-%m-%d')

        plan_info = conn.execute(
            "SELECT category, target_count FROM weekly_plan WHERE persona_id = ? AND week_start_date = ?",
            (persona_id, week_start_str)
        ).fetchall()
        details['plan'] = plan_info

        return details
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ë–î (get_persona_details): {e}")
        return None
    finally:
        if conn:
            conn.close()


def set_user_persona(user_id: int, persona_id: int):
    try:
        conn = get_db_connection()
        conn.execute("UPDATE users SET subscribed_persona_id = ? WHERE id = ?", (persona_id, user_id))
        conn.commit()
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞ —Å ID: {persona_id}")
    except sqlite3.Error as e:
        print(f"–û—à–∏–±–∫–∞ –ë–î (set_user_persona): {e}")
    finally:
        if conn:
            conn.close()


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---

def create_selection_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω—ã."""
    personas = get_all_personas()
    keyboard = []
    for persona in personas:
        # –ü–†–ï–§–ò–ö–° 'select_persona_' –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è
        button = [InlineKeyboardButton(persona['persona_name'], callback_data=f"select_persona_{persona['id']}")]
        keyboard.append(button)
    return InlineKeyboardMarkup(keyboard)


def create_confirmation_keyboard(persona_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –∏ '–ù–∞–∑–∞–¥'."""
    keyboard = [
        [  # –û–¥–∏–Ω —Ä—è–¥ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_persona_{persona_id}"),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_selection")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä—Å–æ–Ω."""
    user = update.effective_user
    if not user: return
    add_or_update_user(user.id, user.username)

    reply_markup = create_selection_keyboard()
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∏–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π:",
        reply_markup=reply_markup
    )


async def show_confirmation_screen(update: Update, context: ContextTypes.DEFAULT_TYPE, persona_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–µ—Ä—Å–æ–Ω—ã –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    query = update.callback_query
    details = get_persona_details(persona_id)
    if not details:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    persona_info = details['info']
    plan_info = details['plan']

    text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{persona_info['persona_name']}*\n\n"
    text += f"_{persona_info['description']}_\n\n"

    if plan_info:
        text += "üìù *–ü–ª–∞–Ω –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:*\n"
        for item in plan_info:
            text += f"  - {item['category']}: {item['target_count']} —à—Ç.\n"
    else:
        text += "üìù *–ü–ª–∞–Ω –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.*\n"

    reply_markup = create_confirmation_keyboard(persona_id)
    await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode='Markdown')


async def confirm_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, persona_id: int):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    user_id = query.from_user.id
    set_user_persona(user_id, persona_id)

    details = get_persona_details(persona_id)
    persona_name = details['info']['persona_name'] if details else "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å"

    await query.edit_message_text(text=f"–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: *{persona_name}*.\n\n"
                                       f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ç—å–∏, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–π –º–∞–Ω–µ—Ä–µ.",
                                  parse_mode='Markdown')


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫-–¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    await query.answer()

    callback_data = query.data

    if callback_data.startswith("select_persona_"):
        persona_id = int(callback_data.split("_")[2])
        await show_confirmation_screen(update, context, persona_id)

    elif callback_data.startswith("confirm_persona_"):
        persona_id = int(callback_data.split("_")[2])
        await confirm_selection(update, context, persona_id)

    elif callback_data == "back_to_selection":
        # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∑–∞–Ω–æ–≤–æ
        reply_markup = create_selection_keyboard()
        await query.edit_message_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∏–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–µ–π:",
            reply_markup=reply_markup
        )

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –ì–û–¢–û–í–´–• –ê–†–•–ò–í–û–í ---

async def send_digest_to_user(application: Application, user_id: int, zip_path: str):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ—Ç–æ–≤—ã–π ZIP-–∞—Ä—Ö–∏–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    try:
        with open(zip_path, 'rb') as zip_file:
            await application.bot.send_document(
                chat_id=user_id,
                document=zip_file,
                filename=os.path.basename(zip_path),
                caption="‚úÖ –í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –≥–æ—Ç–æ–≤!"
            )
        print(f"     [DELIVERY] ZIP-–∞—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
        return True

    except Exception as e:
        print(f"     [DELIVERY_ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—Ä—Ö–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False


def main() -> None:
    if not BOT_TOKEN:
        print("–û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –¥–ª—è Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ long polling...")
    application.run_polling()


if __name__ == '__main__':
    main()
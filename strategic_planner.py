import os
import json
import sqlite3
from pathlib import Path
from datetime import date, timedelta
from collections import defaultdict
import google.generativeai as genai
from dotenv import load_dotenv
from google.generativeai.types import GenerationConfig

from alerter import send_admin_alert
from database_manager import get_db_connection

'''
–ú–æ–¥—É–ª—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
–ó–∞–ø—É—Å–∫–∞–µ—Ç "Content Strategist" –ø—Ä–æ–º–ø—Ç, –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç Gemini –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω
–Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –∫–∞–∂–¥–æ–π –ø–µ—Ä—Å–æ–Ω—ã –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
–¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç rebalancer_config.json.
'''

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
REBALANCER_CONFIG_FILE = 'rebalancer_config.json'
STRATEGIC_PROMPT_FILE = os.path.join('Prompts', 'strategic_planner_prompt_en.txt')
ENV_FILE = '.env'


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def load_config(config_path: str) -> dict | None:
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        print(f"     [ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞ {config_path}: {e}")
        return None


def save_json_file(data: dict, filepath: str) -> bool:
    try:
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        return True
    except IOError as e:
        print(f"     [ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filepath}: {e}")
        return False


def get_strategic_plan(prompt: str, config: dict) -> dict | None:
    api_key_names = config.get('api_key_names', [])
    api_keys = [os.getenv(key) for key in api_key_names if os.getenv(key)]
    if not api_keys:
        print("     [ERROR] API-–∫–ª—é—á–∏ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env")
        return None

    model_name = config.get('gemini_model', 'gemini-2.5-pro')
    generation_config = GenerationConfig(
        response_mime_type="application/json",
        temperature=0.9
    )

    for i, api_key in enumerate(api_keys):
        print(f"     –ü–æ–ø—ã—Ç–∫–∞ {i + 1}/{len(api_keys)} —Å –∫–ª—é—á–æ–º ...{api_key[-4:]}")
        try:
            genai.configure(api_key=api_key)
            model = genai.GenerativeModel(model_name)
            response = model.generate_content(contents=prompt, generation_config=generation_config)
            parsed_response = json.loads(response.text)
            print("     –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –ø–∞—Ä—Å–∏–Ω–≥ JSON –ø–æ–ª—É—á–µ–Ω.")
            return parsed_response
        except Exception as e:
            print(f"     [ERROR] –û—à–∏–±–∫–∞ —Å –∫–ª—é—á–æ–º ...{api_key[-4:]}: {e}")
            continue

    print("     [CRITICAL] –ù–∏ –æ–¥–∏–Ω –∏–∑ API-–∫–ª—é—á–µ–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª.")
    return None


def save_plan_to_db(plan_json: dict, personas_map: dict) -> bool:
    """–ü–∞—Ä—Å–∏—Ç JSON –æ—Ç Gemini –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–æ –¥–Ω—è–º –≤ —Ç–∞–±–ª–∏—Ü—É weekly_plan."""
    try:
        author_plan_by_day = plan_json['author_plan_by_day']
        category_dist = plan_json['category_distribution_by_author']

        today = date.today()
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        week_start_date = (today - timedelta(days=today.weekday())).strftime('%Y-%m-%d')

        to_insert = []

        for persona_code, daily_counts in author_plan_by_day.items():
            if persona_code not in personas_map:
                print(f"     [WARNING] –ü–µ—Ä—Å–æ–Ω–∞ '{persona_code}' –∏–∑ –ø–ª–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            persona_id = personas_map[persona_code]
            persona_categories = category_dist.get(persona_code, {})

            category_pool = []
            for category, count in persona_categories.items():
                category_pool.extend([category] * count)

            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –¥–Ω—è–º
            day_keys = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
            for day in day_keys:
                num_articles = daily_counts.get(day, 0)
                categories_for_day = category_pool[:num_articles]
                category_pool = category_pool[num_articles:]

                day_category_counts = defaultdict(int)
                for cat in categories_for_day:
                    day_category_counts[cat] += 1

                for category, count in day_category_counts.items():
                    to_insert.append((week_start_date, day, persona_id, category, count))

        if not to_insert:
            print("     [ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î.")
            return False

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM weekly_plan WHERE week_start_date = ?", (week_start_date,))
        print(f"     –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å {week_start_date}.")

        sql = "INSERT INTO weekly_plan (week_start_date, day_of_week, persona_id, category, target_count) VALUES (?, ?, ?, ?, ?)"
        cursor.executemany(sql, to_insert)
        conn.commit()
        print(f"     –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {cursor.rowcount} –∑–∞–ø–∏—Å–µ–π –æ –ø–ª–∞–Ω–µ –≤ –ë–î.")
        return True

    except (KeyError, sqlite3.Error) as e:
        print(f"     [ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞–Ω–∞ –∏–ª–∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {e}")
        import traceback
        traceback.print_exc()
        return False


def get_personas_map() -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {persona_code: id} –∏–∑ –ë–î."""
    conn = get_db_connection()
    try:
        cursor = conn.execute("SELECT id, persona_code FROM personas")
        return {row['persona_code']: row['id'] for row in cursor.fetchall()}
    finally:
        if conn:
            conn.close()


def run_strategic_planner() -> bool:
    print("\n--- –ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è Strategic Planner ---")
    load_dotenv(ENV_FILE)

    rebalancer_config = load_config(REBALANCER_CONFIG_FILE)
    if not rebalancer_config:
        send_admin_alert(f"üî• *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π –≤ Strategic Planner:*\n–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å `{REBALANCER_CONFIG_FILE}`")
        return False

    try:
        prompt_text = Path(STRATEGIC_PROMPT_FILE).read_text(encoding='utf-8')
    except FileNotFoundError:
        send_admin_alert(f"üî• *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π –≤ Strategic Planner:*\n–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª `{STRATEGIC_PROMPT_FILE}`")
        return False

    plan_json = get_strategic_plan(prompt_text, rebalancer_config)

    if plan_json and 'target_topic_ratio' in plan_json and 'category_distribution_by_author' in plan_json:
        rebalancer_config['target_topic_ratio'] = plan_json['target_topic_ratio']
        save_json_file(rebalancer_config, REBALANCER_CONFIG_FILE)
        print(f"     –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {REBALANCER_CONFIG_FILE} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

        personas_map = get_personas_map()
        if not save_plan_to_db(plan_json, personas_map):
            send_admin_alert("‚ö†Ô∏è *–°–±–æ–π –≤ Strategic Planner:*\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –≤ –ë–î.")
            return True

        return True
    else:
        error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω –æ—Ç Gemini. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–ª–∞–Ω —Å –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏."
        print(f"     [WARNING] {error_message}")
        send_admin_alert(f"‚ö†Ô∏è *–°–±–æ–π –≤ Strategic Planner:*\n{error_message}")
        return True


if __name__ == '__main__':
    if run_strategic_planner():
        print("--- –ú–æ–¥—É–ª—å Strategic Planner —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É ---")
    else:
        print("--- –†–∞–±–æ—Ç–∞ –º–æ–¥—É–ª—è Strategic Planner –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π ---")
import os
import json
from pathlib import Path
from typing import List, Dict
import google.generativeai as genai
from dotenv import load_dotenv
from google.generativeai.types import GenerationConfig

from alerter import send_admin_alert
from database_manager import get_all_personas, update_persona_image_style

'''
–ú–æ–¥—É–ª—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∏–ª–µ–π –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
–ó–∞–ø—É—Å–∫–∞–µ—Ç "Art Director" –ø—Ä–æ–º–ø—Ç, –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç Gemini 5 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
–¥–ª—è –∫–∞–∂–¥–æ–π –ø–µ—Ä—Å–æ–Ω—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
'''

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
PROMPT_FILE = os.path.join('Prompts', 'image_style_generator_prompt.txt')
API_KEY_NAMES = ["GEMINI_API_KEY_7", "GEMINI_API_KEY_8"]
MODEL_NAME = "gemini-2.5-pro"
ENV_FILE = '.env'


# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---

def get_image_styles_from_ai(prompt: str) -> List[Dict] | None:
    """
    –î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Gemini, –ø–µ—Ä–µ–±–∏—Ä–∞—è API-–∫–ª—é—á–∏, –∏ –æ–∂–∏–¥–∞–µ—Ç JSON-–º–∞—Å—Å–∏–≤.
    """
    load_dotenv(ENV_FILE)
    api_keys = [os.getenv(key) for key in API_KEY_NAMES if os.getenv(key)]
    if not api_keys:
        print("     [ERROR] API-–∫–ª—é—á–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å—Ç–∏–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env")
        return None

    generation_config = GenerationConfig(
        response_mime_type="application/json",
        temperature=1.0
    )

    for i, api_key in enumerate(api_keys):
        print(f"     –ü–æ–ø—ã—Ç–∫–∞ {i + 1}/{len(api_keys)} —Å –∫–ª—é—á–æ–º ...{api_key[-4:]}")
        try:
            genai.configure(api_key=api_key)
            model = genai.GenerativeModel(MODEL_NAME)
            response = model.generate_content(contents=prompt, generation_config=generation_config)

            parsed_response = json.loads(response.text)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∏–∑ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            if isinstance(parsed_response, list) and len(parsed_response) == 5:
                print("     –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è JSON-–º–∞—Å—Å–∏–≤–∞ –ø–æ–ª—É—á–µ–Ω—ã.")
                return parsed_response
            else:
                print(f"     [WARNING] –û—Ç–≤–µ—Ç API –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º –∏–∑ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –û—Ç–≤–µ—Ç: {parsed_response}")
        except Exception as e:
            print(f"     [ERROR] –û—à–∏–±–∫–∞ —Å –∫–ª—é—á–æ–º ...{api_key[-4:]}: {e}")
            continue

    print("     [CRITICAL] –ù–∏ –æ–¥–∏–Ω –∏–∑ API-–∫–ª—é—á–µ–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∏–ª–∏ –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
    return None


def run_image_prompt_generator() -> bool:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∏–ª–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    """
    print("  -> –ó–∞–ø—É—Å–∫ image_prompt_generator.py...")

    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
    try:
        prompt_text = Path(PROMPT_FILE).read_text(encoding='utf-8')
    except FileNotFoundError:
        send_admin_alert(f"üî• *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π –≤ Image Prompt Generator:*\n–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –ø—Ä–æ–º–ø—Ç–æ–º `{PROMPT_FILE}`")
        return False  # –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

    # 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª–∏ –æ—Ç Gemini
    generated_styles = get_image_styles_from_ai(prompt_text)

    # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if not generated_styles:
        error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç Gemini. –ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Å—Ç–∞—Ä—ã–µ —Å—Ç–∏–ª–∏."
        print(f"     [WARNING] {error_message}")
        send_admin_alert(f"‚ö†Ô∏è *–°–±–æ–π –≤ Image Prompt Generator:*\n{error_message}")
        return True

    # 4. –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É –ø–µ—Ä—Å–æ–Ω –∏–∑ –ë–î –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    personas = get_all_personas()
    personas_map = {p['persona_code']: p['id'] for p in personas}

    # 5. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ –ë–î
    updated_count = 0
    for style_data in generated_styles:
        persona_code = style_data.get('persona_code')
        new_style = style_data.get('image_prompt_style')

        if persona_code and new_style and persona_code in personas_map:
            persona_id = personas_map[persona_code]
            update_persona_image_style(persona_id, new_style)
            updated_count += 1
        else:
            print(f"     [WARNING] –ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∏–∑ AI: {style_data}")

    print(f"     –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∏–∑ 5 —Å—Ç–∏–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    return True


if __name__ == '__main__':
    if run_image_prompt_generator():
        print("\n--- –ú–æ–¥—É–ª—å Image Prompt Generator —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É ---")
    else:
        print("\n--- –†–∞–±–æ—Ç–∞ –º–æ–¥—É–ª—è Image Prompt Generator –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π ---")